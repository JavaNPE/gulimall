spring:
  cloud:
    gateway:
      routes:
        - id: test_route    # - : 表示数组
          uri: https://www.zhihu.com
          predicates: #所有的断言规则
            #- Query=rul  #如果我们有‘rul’这个参数，那么我们就去‘https://www.zhihu.com’这个地址
            - Query=url,zhihu  #如果我们带 了“zhihu”，我们就跳转“https://www.zhihu.com”

        - id: jd_route
          uri: https://www.jd.com
          predicates:
            - Query=url,jd

        ##将精确的路由规则放置到模糊的路由规则的前面--- Path=/api/product/**是精确路由,压测/hello简单服务
        - id: product_route
          uri: lb://gulimall-product # 注册中心的服务
          predicates:
            - Path=/api/product/**,/hello
          filters:
            - RewritePath=/api/(?<segment>/?.*),/$\{segment}

        - id: third_party_route
          uri: lb://gulimall-third-party
          predicates:
            - Path=/api/thirdparty/**     #只要是/api/thirdparty这些前缀的 就自动路由给第三方服务gulimall-third-party
          filters:
            - RewritePath=/api/thirdparty/(?<segment>/?.*),/$\{segment}

        - id: member_route
          uri: lb://gulimall-member
          predicates:
            - Path=/api/member/**     #只要是/api/member 这些前缀的 就自动路由给第三方服务gulimall-third-party
          filters:
            - RewritePath=/api/(?<segment>/?.*),/$\{segment}

        - id: ware_route
          uri: lb://gulimall-ware
          predicates:
            - Path=/api/ware/**     #只要是/api/ware 这些前缀的 就自动路由给第三方服务gulimall-third-party
          filters:
            - RewritePath=/api/(?<segment>/?.*),/$\{segment}

        ## 是模糊路由
        - id: admin_route
          uri: lb://renren-fast # 路由给renren-fast
          predicates:  # 什么情况下路由给它
            - Path=/api/** # 默认前端项目都带上api前缀，就是我们前面题的localhost:88/api
          filters:
            - RewritePath=/api/(?<segment>.*),/renren-fast/$\{segment}  # 把/api/* 改变成 /renren-fast/*

          # 只要是gulimall.com域名下的所有请求，我们都转给gulimall-product微服务,PS一样要放在最后面
        - id: gulimall_host_route
          uri: lb://gulimall-product
          predicates:
            - Host=gulimall.com

          # 只要以search.gulimall.com开头，我们就将其负载均衡到gulimall-search服务
        - id: gulimall_search_route
          uri: lb://gulimall-search
          predicates:
            - Host=search.gulimall.com
        # 只要以auth.gulimall.com开头，我们就将其负载均衡到gulimall-auth-server服务
        - id: gulimall_auth_route
          uri: lb://gulimall-auth-server
          predicates:
            - Host=auth.gulimall.com

        # 只要以cart.gulimall.com开头，我们就将其负载均衡到gulimall-cart服务
        - id: gulimall_cart_route
          uri: lb://gulimall-cart
          predicates:
            - Host=cart.gulimall.com
        # 只要以order.gulimall.com开头，我们就将其负载均衡到gulimall-order服务
        - id: gulimall_order_route
          uri: lb://gulimall-order
          predicates:
            - Host=order.gulimall.com
## 前端项目，统一加上  /api 统一标识符
## http://localhost:88/api/captcha.jpg    实际获取到的验证码请求地址：http://localhost:8080/renren-fast/captcha.ipg
## http://localhost:88/api/product/category/list/tree不存在（请求发送的是这个，但是不是我们需要的）,只有通过http://localhost:10000/product/category/list/tree路径才能够正常访问


#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: test_route  # - : 表示数组
#          uri: https://www.baidu.com
#          predicates: #所有的断言规则
#            #- Query=rul  #如果我们有‘rul’这个参数，那么我们就去‘https://www.baidu.com’这个地址
#            - Query=url,baidu    # 如果我们带 了“baidu”，我们就跳转“https://www.baidu.com”
#        - id: qq_route
#          uri: https://www.qq.com
#          predicates:
#            - Query=url,qq